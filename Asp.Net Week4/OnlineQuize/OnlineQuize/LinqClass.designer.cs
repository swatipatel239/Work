#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnlineQuize
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OnlineQuize")]
	public partial class LinqClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertQuestionsDatabase(QuestionsDatabase instance);
    partial void UpdateQuestionsDatabase(QuestionsDatabase instance);
    partial void DeleteQuestionsDatabase(QuestionsDatabase instance);
    #endregion
		
		public LinqClassDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["OnlineQuizeConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Login> Logins
		{
			get
			{
				return this.GetTable<Login>();
			}
		}
		
		public System.Data.Linq.Table<QuestionsDatabase> QuestionsDatabases
		{
			get
			{
				return this.GetTable<QuestionsDatabase>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Login")]
	public partial class Login
	{
		
		private int _Id;
		
		private string _UserName;
		
		private string _Password;
		
		private string _Status;
		
		public Login()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionsDatabase")]
	public partial class QuestionsDatabase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Questions;
		
		private string _Choice1;
		
		private string _Choice2;
		
		private string _Choice3;
		
		private string _Choice4;
		
		private string _Answer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnQuestionsChanging(string value);
    partial void OnQuestionsChanged();
    partial void OnChoice1Changing(string value);
    partial void OnChoice1Changed();
    partial void OnChoice2Changing(string value);
    partial void OnChoice2Changed();
    partial void OnChoice3Changing(string value);
    partial void OnChoice3Changed();
    partial void OnChoice4Changing(string value);
    partial void OnChoice4Changed();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    #endregion
		
		public QuestionsDatabase()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Questions", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				if ((this._Questions != value))
				{
					this.OnQuestionsChanging(value);
					this.SendPropertyChanging();
					this._Questions = value;
					this.SendPropertyChanged("Questions");
					this.OnQuestionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Choice1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Choice1
		{
			get
			{
				return this._Choice1;
			}
			set
			{
				if ((this._Choice1 != value))
				{
					this.OnChoice1Changing(value);
					this.SendPropertyChanging();
					this._Choice1 = value;
					this.SendPropertyChanged("Choice1");
					this.OnChoice1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Choice2", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Choice2
		{
			get
			{
				return this._Choice2;
			}
			set
			{
				if ((this._Choice2 != value))
				{
					this.OnChoice2Changing(value);
					this.SendPropertyChanging();
					this._Choice2 = value;
					this.SendPropertyChanged("Choice2");
					this.OnChoice2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Choice3", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Choice3
		{
			get
			{
				return this._Choice3;
			}
			set
			{
				if ((this._Choice3 != value))
				{
					this.OnChoice3Changing(value);
					this.SendPropertyChanging();
					this._Choice3 = value;
					this.SendPropertyChanged("Choice3");
					this.OnChoice3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Choice4", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Choice4
		{
			get
			{
				return this._Choice4;
			}
			set
			{
				if ((this._Choice4 != value))
				{
					this.OnChoice4Changing(value);
					this.SendPropertyChanging();
					this._Choice4 = value;
					this.SendPropertyChanged("Choice4");
					this.OnChoice4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
